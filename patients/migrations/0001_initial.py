# Generated by Django 2.0.2 on 2018-06-20 10:26

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Allergen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter an Allergen', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_allergy', models.DateField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('allergen', models.ManyToManyField(help_text='Select an Allergen for this patient', to='patients.Allergen')),
            ],
        ),
        migrations.CreateModel(
            name='Biometric',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.FloatField(help_text='Enter height in inches', null=True)),
                ('weight', models.FloatField(help_text='Enter weight in lbs', null=True)),
                ('bmi', models.FloatField(help_text='Enter BMI', null=True)),
                ('neck_girth', models.FloatField(blank=True, help_text='Enter Neck Girth', null=True)),
                ('inches_sn', models.FloatField(blank=True, help_text='Enter Inches from SN', null=True)),
                ('umbilicus_girth', models.FloatField(blank=True, help_text='Enter Umbilicus Girth', null=True)),
                ('hip_girth', models.FloatField(blank=True, help_text='Enter Hip Girth', null=True)),
                ('inches_umbilicus', models.FloatField(blank=True, help_text='Enter Inches from Umbilicus', null=True)),
                ('body_composition', models.FloatField(blank=True, help_text='Enter Body Composition', null=True)),
                ('body_fat', models.IntegerField(blank=True, help_text='Enter % Body Fat', null=True)),
                ('vat', models.FloatField(blank=True, help_text='Enter VAT', null=True)),
                ('lean_mass', models.FloatField(blank=True, help_text='Enter Lean Mass', null=True)),
                ('bp_systolic', models.PositiveIntegerField(help_text='Enter BP(Systolic)', null=True)),
                ('bp_diastolic', models.PositiveIntegerField(help_text='Enter BP(Diastolic)', null=True)),
                ('pulse', models.PositiveIntegerField(help_text='Enter Pulse Rate', null=True)),
                ('o2', models.PositiveIntegerField(help_text='Enter O2', null=True)),
                ('image_bodyscan', models.FileField(blank=True, null=True, upload_to='')),
                ('image_front', models.FileField(blank=True, null=True, upload_to='')),
                ('image_side', models.FileField(blank=True, null=True, upload_to='')),
                ('date_biometric', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('u', 'Underweight'), ('n', 'Normal'), ('o', 'Overweight'), ('x', 'Obesity I'), ('y', 'Obesity II'), ('z', 'Obesity III')], default='o', help_text='Risk Level', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a Country', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a day #(e.g. Day 0, Day 83)', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Diagnose',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_diagnose', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Drug',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a Drug name', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Ethnicity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter an Ethnicity', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter an Exercise Plan (Eg. Resistance, HIIT,etc)', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Illness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter an illness', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('preferred_name', models.CharField(help_text='Enter a preferred name to use', max_length=100)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Enter any notes on patient here', null=True)),
                ('phone', models.CharField(help_text='Enter a mobile number', max_length=100)),
                ('height', models.FloatField(help_text='Enter height in inches')),
                ('gender', models.CharField(blank=True, choices=[('m', 'Male'), ('f', 'Female'), ('o', 'Other')], default='f', help_text='Gender', max_length=1)),
                ('address1', models.CharField(blank=True, help_text='Enter Street Address', max_length=100, null=True)),
                ('address2', models.CharField(blank=True, help_text='Enter Additional Address Here', max_length=100, null=True)),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.Country')),
                ('ethnicity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.Ethnicity')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('auth.user', models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Initial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Enter an initial patient first name', max_length=30)),
                ('last_name', models.CharField(blank=True, help_text='Enter an initial patient last name', max_length=50)),
                ('middle_name', models.CharField(blank=True, help_text='Enter an initial patient middle name', max_length=30)),
                ('date_of_birth', models.DateField()),
                ('phone', models.CharField(help_text='Enter a mobile number', max_length=100)),
                ('height', models.FloatField(help_text='Enter height in inches')),
                ('weight', models.FloatField(help_text='Enter weight in pounds')),
                ('bmi', models.FloatField()),
                ('date_initial', models.DateField()),
                ('bp_systolic_lie', models.PositiveIntegerField(help_text='Enter Systolic BP while lying down')),
                ('bp_diastolic_lie', models.PositiveIntegerField(help_text='Enter Diastolic BP while lying down')),
                ('hr_lie', models.PositiveIntegerField(help_text='Enter Heart rate while lying down')),
                ('o2_lie', models.PositiveIntegerField(help_text='Enter O2 while lying down')),
                ('bp_systolic_sit', models.PositiveIntegerField(help_text='Enter Systolic BP while sitting')),
                ('bp_diastolic_sit', models.PositiveIntegerField(help_text='Enter Diastolic BP while sitting')),
                ('hr_sit', models.PositiveIntegerField(help_text='Enter Heart rate while sitting')),
                ('o2_sit', models.PositiveIntegerField(help_text='Enter O2 while sitting')),
                ('bp_systolic_stand', models.PositiveIntegerField(help_text='Enter Systolic BP while standing')),
                ('bp_diastolic_stand', models.PositiveIntegerField(help_text='Enter Diastolic BP while standing')),
                ('hr_stand', models.PositiveIntegerField(help_text='Enter Heart rate while sitting')),
                ('o2_stand', models.PositiveIntegerField(help_text='Enter O2 while sitting')),
                ('notes', models.TextField(blank=True, null=True)),
                ('accepted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Insurance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter an Insurance / Health Plan', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(blank=True, help_text='Enter test result', null=True)),
                ('date_lab', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['date_lab'],
                'permissions': (('can_mark_checked', 'Set lab as checked'),),
            },
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_meal', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dose', models.FloatField(help_text='Enter dosage', null=True)),
                ('frequency', models.PositiveIntegerField(help_text='Enter frequency of medication use per day', null=True)),
                ('date_start', models.DateField(blank=True, help_text='Enter date medication started', null=True)),
                ('date_end', models.DateField(blank=True, help_text='Enter date medication discontinued', null=True)),
                ('date_medication', models.DateField()),
                ('drug', models.ManyToManyField(help_text='Select a drug for this patient', to='patients.Drug')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medications', to='patients.Initial')),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a Meal Plan (Eg. 2MR 2FM, 4MR, etc)', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Referrer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a referrer(e.g. Doctor No, Dr. A, Google, Ad)', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a State', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a lab test', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(blank=True, default=0, help_text='Enter Week Number', null=True)),
                ('weight', models.FloatField(blank=True, help_text='Enter weight in lbs', null=True)),
                ('delta', models.FloatField(blank=True, help_text='Enter weekly weight change (Delta)', null=True)),
                ('sigma', models.FloatField(blank=True, help_text='Enter total weight change (Sigma)', null=True)),
                ('bp_systolic', models.PositiveIntegerField(blank=True, help_text='Enter Systolic Blood Pressure', null=True)),
                ('bp_diastolic', models.PositiveIntegerField(blank=True, help_text='Enter Diastolic Blood Pressure', null=True)),
                ('pulse', models.PositiveIntegerField(blank=True, help_text='Enter Pulse', null=True)),
                ('o2', models.PositiveIntegerField(blank=True, help_text='Enter O2', null=True)),
                ('date_menstruation', models.DateField(blank=True, help_text='Enter last menstruation if applicable', null=True)),
                ('date_week', models.DateField()),
                ('eating_off', models.BooleanField(default=False, help_text='Eating off?')),
                ('broth', models.PositiveIntegerField(blank=True, help_text='Enter number of broths per day', null=True)),
                ('fluid', models.FloatField(blank=True, help_text='Enter fluid ounces per day', null=True)),
                ('constipation', models.BooleanField(default=False, help_text='Constipation?')),
                ('diarrhea', models.BooleanField(default=False, help_text='Diarrhea?')),
                ('ab_discomfort', models.BooleanField(default=False, help_text='Ab Discomfort?')),
                ('gas_bloating', models.BooleanField(default=False, help_text='Gas/Bloating?')),
                ('nausea', models.BooleanField(default=False, help_text='Nausea?')),
                ('vomiting', models.BooleanField(default=False, help_text='Vomiting?')),
                ('dizziness', models.BooleanField(default=False, help_text='Dizziness?')),
                ('headache', models.BooleanField(default=False, help_text='Headache?')),
                ('sleep', models.CharField(blank=True, choices=[('e', 'Excellent'), ('g', 'Good'), ('f', 'Fair'), ('p', 'Poor')], default='g', help_text='Choose Sleep Quality', max_length=1)),
                ('stress', models.CharField(blank=True, choices=[('h', 'High'), ('m', 'Medium'), ('i', 'Mild'), ('n', 'None')], default='m', help_text='Choose Stress Level', max_length=1)),
                ('fatigue', models.BooleanField(default=False, help_text='New Fatigue?')),
                ('medication', models.BooleanField(default=False, help_text='Change in medication?(if yes, use med list)')),
                ('steps', models.PositiveIntegerField(blank=True, help_text='Enter number of steps', null=True)),
                ('concerns', models.TextField(blank=True, help_text='Enter any concerns', null=True)),
                ('commentary', models.TextField(blank=True, help_text='Commentaries/Orders', null=True)),
                ('exercise', models.ManyToManyField(help_text='Select exercises for this patient', to='patients.Exercise')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='weeks', to='patients.Info')),
            ],
        ),
        migrations.AddField(
            model_name='meal',
            name='plan',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.Plan'),
        ),
        migrations.AddField(
            model_name='meal',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='meals', to='patients.Info'),
        ),
        migrations.AddField(
            model_name='lab',
            name='test',
            field=models.ManyToManyField(help_text='Select a test for this patient', to='patients.Test'),
        ),
        migrations.AddField(
            model_name='lab',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='labs', to='patients.Info'),
        ),
        migrations.AddField(
            model_name='initial',
            name='referrer',
            field=models.ManyToManyField(help_text='Select a referrer for this patient', to='patients.Referrer'),
        ),
        migrations.AddField(
            model_name='info',
            name='initial',
            field=models.OneToOneField(blank=True, help_text='Select an initial patient', null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.Initial'),
        ),
        migrations.AddField(
            model_name='info',
            name='insurance',
            field=models.ManyToManyField(help_text='Select an insurance for this patient', to='patients.Insurance'),
        ),
        migrations.AddField(
            model_name='info',
            name='name',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='info_name', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='info',
            name='state',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.State'),
        ),
        migrations.AddField(
            model_name='diagnose',
            name='illness',
            field=models.ManyToManyField(help_text='Select an illness for this patient', to='patients.Illness'),
        ),
        migrations.AddField(
            model_name='diagnose',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='diagnoses', to='patients.Initial'),
        ),
        migrations.AddField(
            model_name='biometric',
            name='day',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.Day'),
        ),
        migrations.AddField(
            model_name='biometric',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biometrics', to='patients.Info'),
        ),
        migrations.AddField(
            model_name='allergy',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='allergies', to='patients.Initial'),
        ),
    ]
